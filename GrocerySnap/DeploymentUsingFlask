!pip install flask
!pip install pyngrok
from flask import Flask, jsonify, request

app = Flask(__name__)

# Define a route for the API
@app.route('/predict', methods=['POST'])
def predict():
    # Parse the input data from the request
    data = request.get_json()
    X = [data['rooms']]

    # Use the trained model to make a prediction
    y_pred = model.predict(X)

    # Return the prediction as a JSON response
    return jsonify({'prediction': y_pred.tolist()})
from pyngrok import ngrok

# Start ngrok tunnel
public_url = ngrok.connect(port='5000')

# Print the public URL
print('Public URL:', public_url)
import requests

# Define the input data
data = {'rooms': 5}

# Send a POST request to the API
response = requests.post(public_url + '/predict', json=data)

# Print the response
print(response.json())




from flask import Flask, render_template, request
from firebase_admin import credentials, initialize_app, db
import cv2
import numpy as np
import tensorflow as tf
import os
import firebase_admin

app = Flask(__name__)

# Initialize Firebase
cred = credentials.Certificate('/content/grocery-inventory-cb542-firebase-adminsdk-zvr11-28b1f82a85.json')
try:
    firebase_admin.get_app()
except ValueError:
    firebase_admin.initialize_app(cred, {'databaseURL': 'https://grocery-inventory-cb542-default-rtdb.firebaseio.com/'})
ref = db.reference()

# Load the trained model
cnn = tf.keras.models.load_model('trained_model.h5')

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload():
    # Get the uploaded image file
    file = request.files['file']

    # Save the uploaded file to disk
    file_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
    file.save(file_path)

    # Load the image and preprocess it for the model
    img = cv2.imread(file_path)
    image = tf.keras.preprocessing.image.load_img(file_path, target_size=(64,64))
    input_arr = tf.keras.preprocessing.image.img_to_array(image)
    input_arr = np.array([input_arr])  

    # Perform the image search
    predictions = cnn.predict(input_arr)
    result_index = np.where(predictions[0] == max(predictions[0]))
    fruit_veg_name = test_set.class_names[result_index[0][0]]
    quantity = ref.child(fruit_veg_name).child('quantity').get()

    return render_template('result.html', fruit_veg_name=fruit_veg_name, quantity=quantity)

if __name__ == '__main__':
    app.config['UPLOAD_FOLDER'] = 'uploads'
    app.run(debug=True)

import pyrebase
from flask import Flask, render_template, request

app = Flask(__name__)

# configure Firebase
config = {
    "apiKey": "YOUR_API_KEY",
    "authDomain": "YOUR_AUTH_DOMAIN",
    "databaseURL": "YOUR_DATABASE_URL",
    "projectId": "YOUR_PROJECT_ID",
    "storageBucket": "YOUR_STORAGE_BUCKET",
    "messagingSenderId": "YOUR_MESSAGING_SENDER_ID",
    "appId": "YOUR_APP_ID"
}
firebase = pyrebase.initialize_app(config)
db = firebase.database()

# define your routes and functions
@app.route("/")
def home():
    return render_template("home.html")

@app.route("/data", methods=["GET", "POST"])
def data():
    if request.method == "POST":
        # do something with the submitted form data
        name = request.form["name"]
        email = request.form["email"]
        message = request.form["message"]
        # add data to Firebase database
        db.child("users").push({
            "name": name,
            "email": email,
            "message": message
        })
        return render_template("data_confirmation.html", name=name)
    else:
        return render_template("data.html")

# run the app
if __name__ == "__main__":
    app.run(debug=True)




import os
import cv2
import numpy as np
import firebase_admin
from firebase_admin import credentials, db
import tensorflow as tf
from flask import Flask, request, render_template
from flask_ngrok import run_with_ngrok


cnn = tf.keras.models.load_model('/content/trained_model.h5')

app = Flask(__name__)
run_with_ngrok(app)  # This will automatically create a public URL for the app on port 5000


def classify_image(file_path):
   
    image = tf.keras.preprocessing.image.load_img(file_path, target_size=(64, 64))
    input_arr = tf.keras.preprocessing.image.img_to_array(image)
    input_arr = np.array([input_arr])

    test_set = tf.keras.utils.image_dataset_from_directory(
        '/content/drive/MyDrive/dataset/test',
        labels="inferred",
        label_mode="categorical",
        class_names=None,
        color_mode="rgb",
        batch_size=32,
        image_size=(64, 64),
        shuffle=False,
    )
    predictions = cnn.predict(input_arr)
    result_index = np.where(predictions[0] == max(predictions[0]))
    fruit_veg_name = test_set.class_names[result_index[0][0]]

    try:
        cred = credentials.Certificate("/content/grocery-inventory-cb542-firebase-adminsdk-zvr11-28b1f82a85.json")
        firebase_admin.initialize_app(cred, {
            'databaseURL': 'https://grocery-inventory-cb542-default-rtdb.firebaseio.com/'
        }, name='grocery_app')
        app = firebase_admin.get_app()
    except ValueError as e:
        print("Firebase app already initialized:", e)
        app = firebase_admin.get_app(name='grocery_app')
    ref = db.reference(app=app)  # pass the initialized app to the reference() method

    quantity = ref.child(fruit_veg_name).child('quantity').get()
    return fruit_veg_name, quantity
@app.route('/')
def index():
    return render_template('index.html')


@app.route('/upload', methods=['POST'])
def upload():
    if request.method == 'POST':
        # Get the uploaded file
        file = request.files['file']
        file_path = os.path.join('./uploads', file.filename)
        file.save(file_path)
        fruit_veg_name, quantity = classify_image(file_path)
        return render_template('result.html', fruit_veg_name=fruit_veg_name, quantity=quantity)

if __name__ == '__main__':
   
    os.makedirs('./uploads', exist_ok=True)
    app.run()
